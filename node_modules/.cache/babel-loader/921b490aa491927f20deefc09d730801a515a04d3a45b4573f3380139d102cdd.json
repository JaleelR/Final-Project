{"ast":null,"code":"import axios from \"axios\";\nconst BASE_URL = process.env.REACT_APP_BASE_URL || \"http://localhost:3001\";\n\n/** API Class.\n *\n * Static class tying together methods used to get/send to to the API.\n * There shouldn't be any frontend-specific stuff here, and there shouldn't\n * be any API-aware stuff elsewhere in the frontend.\n *\n */\n\nexport class JoblyApi {\n  // the token for interactive with the API will be stored here.\n\n  /* skeleton method for get calls  */\n  static async request(endpoint) {\n    let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let method = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"get\";\n    console.debug(\"API Call:\", endpoint, data, method);\n\n    //there are multiple ways to pass an authorization token, this is how you pass it in the header.\n    //this has been provided to show you another way to pass the token. you are only expected to read this code for this project.\n    const url = \"\".concat(BASE_URL, \"/\").concat(endpoint);\n    const headers = {\n      Authorization: \"Bearer \".concat(JoblyApi.token)\n    };\n    console.log(\"headers::::::\", headers);\n    const params = method === \"get\" ? data : {};\n    try {\n      return (await axios({\n        url,\n        method,\n        data,\n        params,\n        headers\n      })).data;\n    } catch (err) {\n      console.error(\"API Error:\", err.response);\n      let message = err.response.data.error.message;\n      throw Array.isArray(message) ? message : [message];\n    }\n  }\n\n  // Individual API routes\n\n  /* Logs in a user */\n  static async login(username, password) {\n    let res = await this.request(\"auth/token\", {\n      username,\n      password\n    }, \"post\");\n    this.token = res.token;\n    console.log(\"login token,\", res.token);\n    return res.token;\n  }\n\n  /* registers a user */\n  static async signup(username, password, firstName, lastName, email) {\n    let res = await this.request(\"auth/register\", {\n      username,\n      password,\n      firstName,\n      lastName,\n      email\n    }, \"post\");\n    this.token = res.token;\n    return res.token;\n  }\n  /* gets info on a user */\n  static async getUserInfo(username) {\n    let res = await this.request(\"users/\".concat(username));\n    return res;\n  }\n  /* Get All companies */\n  static async getCompanies() {\n    let res = await this.request(\"companies\");\n    return res.companies;\n  }\n\n  /** Get details on a company by handle. */\n\n  static async getCompany(handle) {\n    let res = await this.request(\"companies/\".concat(handle));\n    return res.company;\n  }\n\n  /* Get All jobs */\n  static async getJobs() {\n    let res = await this.request(\"jobs\");\n    return res.jobs;\n  }\n\n  /** Get job by handle. */\n\n  static async getJob(id) {\n    let res = await this.request(\"jobs/\".concat(id));\n    return res.company;\n  }\n\n  // static async signup (username, password, name, firstname, lastname, email) {\n  //   let res = await this.request(`token`, { username, password, name, firstname, lastname, email }, \"post\" );\n  //   return res;\n  // }\n\n  static async updateUser(username, data) {\n    let res = await this.request(\"users/\".concat(username), data, \"patch\");\n    return res;\n  }\n  static async applyToJob(username, jobId) {\n    await this.request(\"users/\".concat(username, \"/jobs/\").concat(jobId), \"post\");\n  }\n} // obviously, you'll add a lot here ...\n\n// for now, put token (\"testuser\" / \"password\" on class)","map":{"version":3,"names":["axios","BASE_URL","process","env","REACT_APP_BASE_URL","JoblyApi","request","endpoint","data","arguments","length","undefined","method","console","debug","url","concat","headers","Authorization","token","log","params","err","error","response","message","Array","isArray","login","username","password","res","signup","firstName","lastName","email","getUserInfo","getCompanies","companies","getCompany","handle","company","getJobs","jobs","getJob","id","updateUser","applyToJob","jobId"],"sources":["/Users/jaleelwhaley/Desktop/Final-Project/frontend/src/Api.js"],"sourcesContent":["import axios from \"axios\";\n\nconst BASE_URL = process.env.REACT_APP_BASE_URL || \"http://localhost:3001\";\n\n/** API Class.\n *\n * Static class tying together methods used to get/send to to the API.\n * There shouldn't be any frontend-specific stuff here, and there shouldn't\n * be any API-aware stuff elsewhere in the frontend.\n *\n */\n\nexport class JoblyApi {\n  // the token for interactive with the API will be stored here.\n  static token;\n  \n\n  /* skeleton method for get calls  */\n  static async request(endpoint, data = {}, method = \"get\") {\n    console.debug(\"API Call:\", endpoint, data, method);\n\n    //there are multiple ways to pass an authorization token, this is how you pass it in the header.\n    //this has been provided to show you another way to pass the token. you are only expected to read this code for this project.\n    const url = `${BASE_URL}/${endpoint}`;\n    const headers = { Authorization: `Bearer ${JoblyApi.token}` };\n    console.log(\"headers::::::\", headers)\n    const params = (method === \"get\")\n        ? data\n        : {};\n\n    try {\n      return (await axios({ url, method, data, params, headers })).data;\n    } catch (err) {\n      console.error(\"API Error:\", err.response);\n      let message = err.response.data.error.message;\n      throw Array.isArray(message) ? message : [message];\n    }\n  }\n\n  // Individual API routes\n\n  /* Logs in a user */\n  static async login(username, password) {\n    let res = await this.request(`auth/token`, {username, password}, \"post\");\n    this.token = res.token;\n    console.log(\"login token,\", res.token)\n    return res.token;\n  }\n\n  /* registers a user */\n  static async signup(username, password, firstName, lastName, email) {\n    let res = await this.request(`auth/register`, { username, password, firstName, lastName, email }, \"post\");\n    this.token = res.token;\n    return res.token;\n  }; \n  /* gets info on a user */\n  static async getUserInfo(username) {\n    let res = await this.request(`users/${username}`);\n    return res;\n  }; \n\n\n/* Get All companies */\n  static async getCompanies() {\n    let res = await this.request(`companies`);\n    return res.companies;\n  }\n\n  /** Get details on a company by handle. */\n\n  static async getCompany(handle) {\n    let res = await this.request(`companies/${handle}`);\n    return res.company;\n  }\n\n\n/* Get All jobs */\n  static async getJobs() {\n    let res = await this.request(`jobs`);\n    return res.jobs;\n  }\n\n  /** Get job by handle. */\n\n  static async getJob(id) {\n    let res = await this.request(`jobs/${id}`);\n    return res.company;\n  }\n\n\n  // static async signup (username, password, name, firstname, lastname, email) {\n  //   let res = await this.request(`token`, { username, password, name, firstname, lastname, email }, \"post\" );\n  //   return res;\n  // }\n\n  static async updateUser(username, data) {\n    let res = await this.request(`users/${username}`, data, \"patch\");\n    return res;\n  };\n\n  static async applyToJob(username, jobId) {\n await this.request(`users/${username}/jobs/${jobId}`, \"post\");\n  };\n\n\n\n\n\n\n\n  // obviously, you'll add a lot here ...\n}\n\n// for now, put token (\"testuser\" / \"password\" on class)\n\n\n    "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}