{"ast":null,"code":"var _jsxFileName = \"/Users/jaleelwhaley/Desktop/Final-Project/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useContext } from 'react';\nimport { useNavigate, BrowserRouter } from \"react-router-dom\";\nimport './App.css';\nimport { JoblyApi } from './Api';\nimport { NavBar } from './NavBar';\nimport { RouteComponent as Routes } from './RouteComponent';\nimport { UserContext } from './userContext';\nimport { jwtDecode } from \"jwt-decode\";\nimport { useLocalStorage } from './useLocalStorage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const TOKEN_STORAGE_ID = \"jobly-token\";\nfunction App() {\n  _s();\n  const [token, setToken] = useLocalStorage(TOKEN_STORAGE_ID);\n  const [currentUser, setCurrentUser] = useState(null);\n  const [loading, setLoading] = useState(true); // Add loading state\n\n  useEffect(() => {\n    async function getUser() {\n      if (token) {\n        try {\n          let {\n            username\n          } = jwtDecode(token);\n          JoblyApi.apiToken = token;\n          let user = await JoblyApi.getUserInfo(username);\n          console.log();\n          setCurrentUser(user);\n          setLoading(false); // Set loading to false after user info is fetched\n        } catch (e) {\n          console.log(\"Error:\", e);\n          setLoading(false); // Set loading to false in case of error\n        }\n      } else {\n        setCurrentUser(null);\n        setLoading(false); // Set loading to false if token is not found\n      }\n    }\n    getUser();\n  }, [token]);\n  async function register(username, password, firstName, lastName, email) {\n    try {\n      const gotToken = await JoblyApi.signup(username, password, firstName, lastName, email);\n      setToken(gotToken);\n      console.log(gotToken);\n      console.log(\"Success!\");\n    } catch (e) {\n      console.log(\"Error:\", e);\n    }\n  }\n  ;\n\n  //   try {\n  //   console.log(\"success!\")\n  // }\n  //   catch (e) {\n  //     console.log(\"Error:\", e)\n  //   }\n\n  async function login(username, password) {\n    try {\n      const getToken = await JoblyApi.login(username, password);\n      console.log(\"tokeeeen:\", getToken);\n      setToken(getToken);\n    } catch (e) {\n      console.log(\"Error:\", e);\n    }\n  }\n  ;\n  function logout() {\n    setToken(\"\");\n    setCurrentUser(null);\n    console.log(token);\n  }\n  return /*#__PURE__*/_jsxDEV(BrowserRouter, {\n    children: /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n      value: {\n        currentUser,\n        setCurrentUser\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"App\",\n        children: /*#__PURE__*/_jsxDEV(\"header\", {\n          className: \"App-header\",\n          children: loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Loading...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(Routes, {\n            register: register,\n            login: login,\n            logout: logout\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"Zj0PMf3y3flT6U9Opib0CXuVT+g=\", false, function () {\n  return [useLocalStorage];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useContext","useNavigate","BrowserRouter","JoblyApi","NavBar","RouteComponent","Routes","UserContext","jwtDecode","useLocalStorage","jsxDEV","_jsxDEV","TOKEN_STORAGE_ID","App","_s","token","setToken","currentUser","setCurrentUser","loading","setLoading","getUser","username","apiToken","user","getUserInfo","console","log","e","register","password","firstName","lastName","email","gotToken","signup","login","getToken","logout","children","Provider","value","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/jaleelwhaley/Desktop/Final-Project/frontend/src/App.js"],"sourcesContent":["import React, {  useState, useEffect, useContext } from 'react';\nimport { useNavigate, BrowserRouter } from \"react-router-dom\"\nimport './App.css';\nimport { JoblyApi } from './Api';\nimport { NavBar } from './NavBar';\nimport { RouteComponent as Routes } from './RouteComponent';\nimport { UserContext } from './userContext';\nimport { jwtDecode } from \"jwt-decode\";\nimport { useLocalStorage } from './useLocalStorage';\nexport const TOKEN_STORAGE_ID = \"jobly-token\"\n\nfunction App() {\n  const [token, setToken] = useLocalStorage(TOKEN_STORAGE_ID);\n  const [currentUser, setCurrentUser] = useState(null);\n  const [loading, setLoading] = useState(true); // Add loading state\n\n  useEffect(() => {\n    async function getUser() {\n      if (token) {\n        try {\n          let { username } = jwtDecode(token);\n          JoblyApi.apiToken = token;\n          let user = await JoblyApi.getUserInfo(username);\n          console.log()\n          setCurrentUser(user);\n          setLoading(false); // Set loading to false after user info is fetched\n        } catch (e) {\n          console.log(\"Error:\", e);\n          setLoading(false); // Set loading to false in case of error\n        }\n      } else {\n        setCurrentUser(null);\n        setLoading(false); // Set loading to false if token is not found\n      }\n    }\n    getUser();\n  }, [token]);\n\n\n\n  async function register(username, password, firstName, lastName, email) {\n    try {\n      const gotToken = await JoblyApi.signup(username, password, firstName, lastName, email);\n      setToken(gotToken);\n      console.log(gotToken);\n      console.log(\"Success!\")\n    } catch (e) {\n      console.log(\"Error:\", e)\n    }\n  };\n\n//   try {\n//   console.log(\"success!\")\n// }\n//   catch (e) {\n//     console.log(\"Error:\", e)\n//   }\n\n  async function login(username, password) {\n    try {\n      const getToken = await JoblyApi.login(username, password);\n     console.log(\"tokeeeen:\", getToken)\n     setToken(getToken); \n    }\n  catch (e) {\n    console.log(\"Error:\", e)\n  }\n  };\n  \n\n  \n  function logout() { \n    setToken(\"\");\n    setCurrentUser(null);\n    console.log(token);\n  }\n\n\n\n\n  return (\n    <BrowserRouter>\n      <UserContext.Provider value={{ currentUser, setCurrentUser }}>\n        <div className=\"App\">\n          <header className=\"App-header\">\n            {loading ? (\n              <p>Loading...</p>\n            ) : (\n              <Routes register={register} login={login} logout={logout} />\n            )}\n          </header>\n        </div>\n      </UserContext.Provider>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}