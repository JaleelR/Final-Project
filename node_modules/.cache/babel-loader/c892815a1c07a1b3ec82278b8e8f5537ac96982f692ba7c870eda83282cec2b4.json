{"ast":null,"code":"import axios from \"axios\";\nconst BASE_URL = process.env.REACT_APP_BASE_URL || \"http://localhost:3001\";\n\n/** API Class.\n *\n * Static class tying together methods used to get/send to to the API.\n * There shouldn't be any frontend-specific stuff here, and there shouldn't\n * be any API-aware stuff elsewhere in the frontend.\n *\n */\n\nexport class JoblyApi {\n  // the token for interactive with the API will be stored here.\n\n  /* skeleton method for get calls  */\n  static async request(endpoint) {\n    let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let method = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"get\";\n    console.debug(\"API Call:\", endpoint, data, method);\n\n    //there are multiple ways to pass an authorization token, this is how you pass it in the header.\n    //this has been provided to show you another way to pass the token. you are only expected to read this code for this project.\n    const url = \"\".concat(BASE_URL, \"/\").concat(endpoint);\n    const headers = {\n      Authorization: \"Bearer \".concat(JoblyApi.token)\n    };\n    const params = method === \"get\" ? data : {};\n    try {\n      return (await axios({\n        url,\n        method,\n        data,\n        params,\n        headers\n      })).data;\n    } catch (err) {\n      console.error(\"API Error:\", err.response);\n      let message = err.response.data.error.message;\n      throw Array.isArray(message) ? message : [message];\n    }\n  }\n  static async login(_ref) {\n    let {\n      sername,\n      password\n    } = _ref;\n    let res = await this.request(\"auth/token\", {\n      username: \"testuser\",\n      password: \"password\"\n    }, \"post\");\n    return res;\n  }\n\n  // Individual API routes\n\n  /* Get All companies */\n  static async getCompanies() {\n    let res = await this.request(\"companies\");\n    return res.companies;\n  }\n\n  /** Get details on a company by handle. */\n\n  static async getCompany(handle) {\n    let res = await this.request(\"companies/\".concat(handle));\n    return res.company;\n  }\n\n  /* Get All jobs */\n  static async getJobs() {\n    let res = await this.request(\"jobs\");\n    return res.jobs;\n  }\n\n  /** Get job by handle. */\n\n  static async getJob(id) {\n    let res = await this.request(\"jobs/\".concat(id));\n    return res.company;\n  }\n  static async signup(username, password, name, firstname, lastname, email) {\n    let res = await this.request(\"token\", {\n      username,\n      password,\n      name,\n      firstname,\n      lastname,\n      email\n    }, \"post\");\n    return res;\n  }\n  static async updateUser(username) {\n    let res = await this.request(\"users/\".concat(username));\n    return res;\n  }\n\n  // obviously, you'll add a lot here ...\n}\n\n// for now, put token (\"testuser\" / \"password\" on class)\nJoblyApi.token = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZ\" + \"SI6InRlc3R1c2VyIiwiaXNBZG1pbiI6ZmFsc2UsImlhdCI6MTU5ODE1OTI1OX0.\" + \"FtrMwBQwe6Ue-glIFgz_Nf8XxRT2YecFCiSpYL0fCXc\";","map":{"version":3,"names":["axios","BASE_URL","process","env","REACT_APP_BASE_URL","JoblyApi","request","endpoint","data","arguments","length","undefined","method","console","debug","url","concat","headers","Authorization","token","params","err","error","response","message","Array","isArray","login","_ref","sername","password","res","username","getCompanies","companies","getCompany","handle","company","getJobs","jobs","getJob","id","signup","name","firstname","lastname","email","updateUser"],"sources":["/Users/jaleelwhaley/Desktop/Final-Project/frontend/src/Api.js"],"sourcesContent":["import axios from \"axios\";\n\nconst BASE_URL = process.env.REACT_APP_BASE_URL || \"http://localhost:3001\";\n\n/** API Class.\n *\n * Static class tying together methods used to get/send to to the API.\n * There shouldn't be any frontend-specific stuff here, and there shouldn't\n * be any API-aware stuff elsewhere in the frontend.\n *\n */\n\nexport class JoblyApi {\n  // the token for interactive with the API will be stored here.\n  static token;\n  \n\n  /* skeleton method for get calls  */\n  static async request(endpoint, data = {}, method = \"get\") {\n    console.debug(\"API Call:\", endpoint, data, method);\n\n    //there are multiple ways to pass an authorization token, this is how you pass it in the header.\n    //this has been provided to show you another way to pass the token. you are only expected to read this code for this project.\n    const url = `${BASE_URL}/${endpoint}`;\n    const headers = { Authorization: `Bearer ${JoblyApi.token}` };\n    const params = (method === \"get\")\n        ? data\n        : {};\n\n    try {\n      return (await axios({ url, method, data, params, headers })).data;\n    } catch (err) {\n      console.error(\"API Error:\", err.response);\n      let message = err.response.data.error.message;\n      throw Array.isArray(message) ? message : [message];\n    }\n  }\n\n\n  static async login({ sername, password }) {\n    let res = await this.request(`auth/token`, {username:\"testuser\", password:\"password\" }, \"post\");\n    return res;\n  }\n\n  // Individual API routes\n\n/* Get All companies */\n  static async getCompanies() {\n    let res = await this.request(`companies`);\n    return res.companies;\n  }\n\n  /** Get details on a company by handle. */\n\n  static async getCompany(handle) {\n    let res = await this.request(`companies/${handle}`);\n    return res.company;\n  }\n\n\n/* Get All jobs */\n  static async getJobs() {\n    let res = await this.request(`jobs`);\n    return res.jobs;\n  }\n\n  /** Get job by handle. */\n\n  static async getJob(id) {\n    let res = await this.request(`jobs/${id}`);\n    return res.company;\n  }\n\n\n\n \n  static async signup (username, password, name, firstname, lastname, email) {\n    let res = await this.request(`token`, { username, password, name, firstname, lastname, email }, \"post\" );\n    return res;\n  }\n\n  static async updateUser(username) {\n    let res = await this.request(`users/${username}`);\n    return res;\n  }\n\n\n\n\n\n\n\n  // obviously, you'll add a lot here ...\n}\n\n// for now, put token (\"testuser\" / \"password\" on class)\nJoblyApi.token = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZ\" +\n    \"SI6InRlc3R1c2VyIiwiaXNBZG1pbiI6ZmFsc2UsImlhdCI6MTU5ODE1OTI1OX0.\" +\n    \"FtrMwBQwe6Ue-glIFgz_Nf8XxRT2YecFCiSpYL0fCXc\";\n\n    "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}